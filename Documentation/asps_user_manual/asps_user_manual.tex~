%% LyX 2.2.2 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[english]{article}
\usepackage[T1]{fontenc}
\usepackage[latin9]{inputenc}
\usepackage{courier}
\usepackage{gensymb}
\usepackage{graphicx}

\addtolength{\oddsidemargin}{-.5in}
	\addtolength{\evensidemargin}{-.5in}
	\addtolength{\textwidth}{1in}


\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
%% Because html converters don't know tabularnewline
\providecommand{\tabularnewline}{\\}

\makeatother

\usepackage{babel}
\begin{document}

\title{ARA Smart Power System\\
User Manual}
\maketitle

\section{Introduction}

A photo of the DAQ box component of the power distribution system, with parts labeled, is given in figure \ref{fig:adaq}.

\begin{figure}[h]
\centering
\includegraphics[width=.8\textwidth]{figures/adaq_withnotes.png}
\caption{A picture of the ADAQ (ADAGG004) with major components listed.}
\label{fig:adaq}
\end{figure}

\section{Power Box}

\section{DAQ Box Web Interface}

\subsection{Main control page}

The main ASPS-DAQ microcontroller presents a web page that allows
monitoring/control of all outputs in the DAQ box, with the exception
of the fiber transceiver, for obvious reasons. The fiber transceiver
\emph{can }be disabled through the USB serial command interface.

\subsection{Ethernet Serial Servers}

The main ASPS-DAQ microcontroller presents serial servers on several
ports.
\begin{itemize}
\item Port 23: ASPS-DAQ Heater debug/reprogramming port
\item Port 24: ASPS-Power serial port
\item Port 25: SBC serial port
\item Port 26: ASPS-DAQ Heater command/monitoring interface
\end{itemize}
To access any of these ports simply telnet to them. For example: \texttt{telnet 128.xxx.xxx.xxx 24}

Note, however, that many Telnet clients automatically echo normally,
and so therefore some care is needed to avoid any hassles. In addition,
the Console Redirection in the SBC's BIOS uses VT100-style function
keys, so some configuration is needed.

At the current time, the most appropriate Telnet client for ASPS-DAQ
is PuTTY. In this case, the following options need to be set:
\begin{itemize}
\item Under ``Terminal,'' select ``Force off'' for Local echo.
\item Under ``Keyboard,'' select VT100+ for the Function keys and keypad
setting.
\end{itemize}
With these settings, the complete boot process for the SBC can be
viewed on port 25, and remote BIOS access is possible.

\subsubsection{Resetting serial servers}

Only 1 user can be connected to a serial server at a time. The status
of the serial servers can be seen under the ``serial.html'' page
(e.g. http://ip.address.here/serial.html), and a serial server which
is connected to an unknown client (or a client which failed to close
the connection somehow) can be forcibly disconnected.

\subsection{ASPS-DAQ Heater}

The heater section of ASPS-DAQ serves as a temperature watchdog. At
power on, it holds off activating the remainder of the system until
the temperature has reached a specified target (typically $-40\,\degree \mbox{C}$)
via the use of an onboard adjustable heater. It is the only section
of the ASPS-DAQ board which is required to operate to $-55\,\degree \mbox{C}$.

Communication with the ASPS-DAQ heater is done via a serial connection
through the main ASPS-DAQ microcontroller, which presents it on a
specified TCP port. It should be noted it is \emph{not} possible to
communicate with the ASPS-DAQ heater until the main power has been
activated. Therefore, any changes to the ``autonomous behavior''
parameters should be done with \emph{extreme} caution.

All communication is done via JSON packets.

There is \emph{also} a secondary serial port interface to the main
ASPS-DAQ microcontroller, used for debugging and bootstrap reprogramming.
This is also presented on a specified TCP port. Entering the device
into bootstrap mode is done via the Web interface at http://ip.address.here/bsl.html.

\subsubsection{LED behavior}

\textbf{At power-on, the red LED by the heater will blink 2 times},
indicating power-on cycle behavior. This is a useful thing to note
if seen at any other time, because at power-on, the heater initially
\emph{disables} the main $+15\,\mbox{V}$ rail, which shuts down the
station completely, before running through the decision tree as to
whether or not to power on. (A normal reset does not cause this behavior
- it is only caused by an initial power-on).

At any other time, the red LED indicates that the \emph{PID controller
is working to find the proper current.} The PID controller is extremely
fast, which means that the red LED will only be on briefly once the
current starts to ramp up if the heater is on.

The green LED indicates that the target temperature has been reached
and everything is OK.

\subsubsection{Monitoring}

The ASPS-DAQ heater puts out a constant stream of monitoring data.
Each JSON key contains a specific group of data.

\paragraph{PID data (``pid'' key)}

This key contains an array of (in order) the setpoint, input, and
output of the heater current PID loop. These values are proportional
to the current flowing through the heater. The scale is roughly $1\,\mbox{mA}$
(e.g. $\mbox{setpoint 500}\simeq500\,\mbox{mA}$). 

\paragraph{Temperature data (``temps'' key)}

This key contains an array containing only the local (microcontroller)
temperature at the current moment. Remote temperature will be added
in the future.

\paragraph{Voltage data (``volts'' key)}

This key contains an array containing the input voltage, and the $+15\,\mbox{V}$
voltage. Note that these two should be close to identical if the system
is on.

\subsubsection{Current control}

The setpoint for the heater (which returns to 0 once the system is
above temperature for the wait period) can be modified via a ``current''
key- that is, a JSON packet with a key of ``current'' and a value
equal to the desired setpoint.

\subsubsection{Heater parameters}

The ``autonomous behavior'' parameters can be queried and altered
with the ``heaterparams'' key. Querying is done by sending a JSON
packet with a ``heaterparams'' key and an empty value (or an array
with less than 2 entries). The heater parameters are

\begin{tabular}{|c|c|c|c|}
\hline 
Index & Description & Units & Default\tabularnewline
\hline 
\hline 
0 & Minimum turn-on temperature & $0.01\,\deg\mbox{C}$ & -4000\tabularnewline
\hline 
1 & Heater current when below temp & mA & 500\tabularnewline
\hline 
2 & Maximum wait time below temp & sec & 7200\tabularnewline
\hline 
3 & Wait time after target temp reached & $0.5\,\mbox{sec}$ & 600\tabularnewline
\hline 
4 & P-term in PID & 128 & \tabularnewline
\hline 
5 & I-term in PID & 64 & \tabularnewline
\hline 
6 & D-term in PID & 0 & \tabularnewline
\hline 
\end{tabular}

\emph{Altering} these values is done by sending a JSON packet with
a key of ``heaterparams'', and an array containing the index to
alter (0-6), followed by the new value. Note that changing the P,
I, or D terms could result in very bad behavior, and these changes
are preserved over power cycles!

\section{DAQ Box USB Interface}
In addition to the web interface, the ASPS-DAQ also includes a USB interface, and
can be accessed through the mini-USB port as labeled in figure \ref{fig:adaq}.
It supports 38400/8/N/1 (which is a high baud rate for ARA boards).

One can connect to it with an serial port client, such as TeraTerm, PuTTY, etc.
On a Linux machine, a common way to so would be to use screen,
e.g. \texttt{sudo screen /dev/ttyUSB0 38400}.

\begin{figure}[h]
\centering
\includegraphics[width=.8\textwidth]{figures/adaq_screen_shot.png}
\caption{A picture of the ADAQ USB interface in a terminal.}
\label{fig:adaq_interface}
\end{figure}

After logging in, you will be presented with a user interface as in 
figure \ref{fig:adaq_interface}, with the prompt \texttt{ADAQ>}.
At this point you can enter a variety of commands
and the ASPS-DAQ will respond with information.

The commands available are, in alphabetical order:
\begin{itemize}
\item \texttt{bridge}
	\begin{itemize}
	\item This connects the main serial console to one of the four serial servers hosted by the ASPS-DAQ.
	\item Execute by running ``\texttt{bridge x}'' where x = 0 for heater monitor, 1 for ASPS-power, 2 for SBC, 3 for heater command interface.
	\item Example: to connect to the ASPS power serial interface, type \texttt{bridge 1}.
	\item To exit, enter \texttt{+++} (three ``plus'' symbols). Interface will close and return you to the \texttt{ADAQ>} prompt. No return character (like $\backslash$\texttt{n} etc.) needed.
	\end{itemize}
\item \texttt{bsl}
	\begin{itemize}
	\item This will reboot either the heater microcontroller or the ASPS-PWR microcontroller in bootstrap-loader (BSL) mode.
	\item Execute by running ``\texttt{bsl x y}'' where x = 0 or 1 for do not/do put the heater into BSL mode, and y= 0 or 1 for do not/ do put the ASPS-PWR uC into BSL mode.
	\item Example: to rebot the ASPS-PWR microcontroller , but not the heater uC microcontroller, into BSL mode, type \texttt{bsl 0 1}.
	\end{itemize}
\item \texttt{control}
	\begin{itemize}
	\item This will turn off the various outputs to the board.
	\item Execute by running ``\texttt{control x y}'' where x = 0, 1, 2, 3, or 4 to select the output to control, and y = 0 or 1 for ''off`` and ''on`` respectively.
		\begin{itemize}
		\item 0 corresponds to AUX2 (typically unused)
		\item 1 corresponds to the DSPM
		\item 2 corresponds to AUX1 (typically the IceCalDuo)
		\item 3 corresponds to ARAFE
		\item 4 corresponds to the Fiber Switch
		\end{itemize}
	\item Example: to reboot the ASPS-PWR microcontroller , but not the heater microcontroller , into BSL mode, type \texttt{bsl 0 1}.
	\end{itemize}
\item \texttt{getmac}
	\begin{itemize}
	\item This will report the mac address of the TIVA microcontroller on the ASPS-DAQ.
	\item Execute by running ``\texttt{getmac}'' (no arguments).
	\end{itemize}
\item \texttt{loop}
	\begin{itemize}
	\item This launches the TIVA microcontroller into an artificial infinite loop. It is a debugging tool used to test whether or not the watchdog is able to catch a runaway process.
	\item Execute by running ``\texttt{loop}'' (no arguments).
	\item Should be followed by a watchdog reset signal.
	\end{itemize}
\item \texttt{identify}
	\begin{itemize}
	\item Prints the ASPS-DAQ board id to the screen.
	\item Execute by running ``\texttt{identify}'' (no arguments).
	\item Name of the board should print to screen, e.g. \texttt{ADAQF003}. ``F'' designates the revision of the board (revF) and 003 designates the individual serial number within that revision series. There are only two active revision series of the ASPS-DAQ, revF and revG.
	\end{itemize}
\item \texttt{ip}
	\begin{itemize}
	\item Requests the ASPS-DAQ to print its IP address to the console.
	\item Execute by running ``\texttt{ip}'' (no arguments).
	\item If the board has a mac address, and it is connected to the internet by a local DHCP server, it will report its IP address.
	\end{itemize}
\item \texttt{reboot}
	\begin{itemize}
	\item Reboots the ASPS-DAQ TIVA microcontroller.
	\item Execute by running ``\texttt{reboot}'' (no arguments).
	\end{itemize}
\item \texttt{savemac}
	\begin{itemize}
	\item \textbf{\underline{WARNING WARNING WARNING}, READ ME BEFORE USING THIS COMMAND: This command can (basically) only be run once in the lifetime of the TIVA microcontroller!! Do not use unless you know what you're doing!}
	\item Stores the mac address entered with \texttt{setmac} to permanent memory.
	\item Execute by running ``\texttt{savemac}'' (no arguments).
	\end{itemize}
\item \texttt{setid}
	\begin{itemize}
	\item Sets the id of the ASPS-DAQ microcontroller. This is the id that is reported by the command \texttt{identify}.
	\item Execute by running ``\texttt{setid ADAQ$\alpha$\#\#\#}'', where $\alpha$ is the board revision letter (e.g. A, B, etc.) and \#\#\# is the three-digit serial number of the board within that revision line. It will only take eight alpha-numeric characters as an argument.
	\item Example: to set a microcontrollers id to ADAQG006 type \texttt{setid ADAQG006}.
	\end{itemize}
\item \texttt{setmac}
	\begin{itemize}
	\item Sets the mac address of the ASPS-DAQ microcontroller. This is the mac address that is reported by the command \texttt{getmac} and saved by the command \texttt{savemac}.
	\item Execute by running ``\texttt{setmac \#\# \#\# \#\# \#\# \#\# \#\#}'', \#\# are the bytes of the mac address, which are typically visualized as \#\#:\#\#:\#\#:\#\#:\#\#:\#\#.
	\item Example: to set a microcontrollers mac address to FC:C2:3D:0D:A8:7C type \texttt{setmac FC C2 3D 0D A8 7C}.
	\item This command must be followed by \texttt{savemac} to take effect permanently. HOWEVER, YOU SHOULD READ THE SECTION ON \texttt{savemac} BEFORE PROCEEDING!!!
	\end{itemize}
\item \texttt{status}
	\begin{itemize}
	\item Reports various housekeeping information on the board (e.g., temperatures and the like), print out like figure \ref{fig:adaq_status}.
	\item Execute by running ``\texttt{status}'' (no arguments).
	\item The various components are:
		\begin{itemize}
		\item The currents being consumed by the four outputs (same labeling as for command \texttt{control}, so see there for what each means.
		\item What channels are currently on (meaning they are being allowed to supply current).
		\item What channels are currently in fault. This means they were either turned off with the \texttt{control} command, or they tripped their electronic fuses by drawing too much power.
		\item The temperature of three on board sensors.
		\end{itemize}
	\end{itemize}
\end{itemize}

\begin{figure}[h]
\centering
\includegraphics[width=.8\textwidth]{figures/adaq_status.png}
\caption{A picture of the ADAQ USB interface in a terminal.}
\label{fig:adaq_status}
\end{figure}



\end{document}
